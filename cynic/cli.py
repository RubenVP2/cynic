# cynic/cli.py

import os
from time import sleep
from rich.console import Console
from rich.prompt import Prompt
from rich.panel import Panel
from rich.text import Text
from rich.syntax import Syntax
from .analyzer import CynicAnalyzer
from .prompts import PROMPT_SYSTEME


def main():
    console = Console()

    api_key = os.getenv("MISTRAL_API_KEY")
    if not api_key:
        console.print(
            "[bold red]Erreur : La cl√© API de Mistral n'a pas √©t√© trouv√©e.[/bold red]"
        )
        console.print(
            "Veuillez la d√©finir avec la variable d'environnement MISTRAL_API_KEY."
        )
        return  # On arr√™te le programme proprement

    try:
        # Affichage du titre et de l'instruction
        titre = Panel(
            Text(
                "üïµÔ∏è‚Äç‚ôÇÔ∏è Cynic (Powered by Mistral) üïµÔ∏è‚Äç‚ôÄÔ∏è",
                justify="center",
                style="bold magenta",
            ),
            title="[bold cyan]Bienvenue[/bold cyan]",
            subtitle="[bold cyan]L'IA qui vous dit la v√©rit√©, m√™me quand √ßa fait mal.[/bold cyan]",
        )
        console.print(titre)
        console.print(
            Panel(
                Syntax(PROMPT_SYSTEME, "markdown", theme="dracula", word_wrap=True),
                title="[bold yellow]Instruction donn√©e √† l'IA[/bold yellow]",
            )
        )
        # Premi√®re interaction avec l'utilisateur : demander le contexte
        console.print("\nPour commencer, d√©cris la situation.", style="bold blue")

        contexte_user = Prompt.ask(
            "[cyan]Quel √©tait le message ou la question d'origine ?[/cyan]"
        )

        # Deuxi√®me interaction avec l'utilisateur : demander la r√©ponse re√ßue
        console.print(
            "\nMaintenant, donne-moi la r√©ponse que tu as re√ßue.", style="bold blue"
        )
        reponse_user = Prompt.ask("[cyan]Quelle a √©t√© la r√©ponse √† analyser ?[/cyan]")

        with console.status(
            "[bold green]Analyse en cours... L'esprit de Cynic s'√©veille...[/bold green]"
        ):
            analyzer = CynicAnalyzer(api_key=api_key)
            analyse = analyzer.analyze(contexte=contexte_user, reponse=reponse_user)
            sleep(1)

        # Rapport d'analyse de Mistral
        console.print("\n[bold]--- RAPPORT D'ANALYSE DE CYNIC ---[/bold]")
        score_final = analyse.get("score", -1)
        verdict_final = analyse.get("verdict", "Aucun verdict re√ßu.")
        couleur_style = "green"
        if score_final > 7:
            couleur_style = "bold red"
        elif score_final > 4:
            couleur_style = "yellow"
        console.print(
            f"\nScore de cynisme estim√© : [{couleur_style}]{score_final} / 10[/{couleur_style}]"
        )
        console.print(Panel(Text(verdict_final, justify="center"), style=couleur_style))

    except KeyboardInterrupt:
        console.print(
            "\n\n[bold yellow]Interruption d√©tect√©e.[/bold yellow] Cynic vous salue bien."
        )


if __name__ == "__main__":
    main()
